'use strict';

var path = require('path');
var spawn = require('child_process').spawn;
var chalk = require('chalk');
var debug = require('debug')('windows-build-tools');

var _require = require('../logging'),
    log = _require.log;

var _require2 = require('../utils/get-build-tools-installer-path'),
    getBuildToolsInstallerPath = _require2.getBuildToolsInstallerPath;

var _require3 = require('../utils/get-python-installer-path'),
    getPythonInstallerPath = _require3.getPythonInstallerPath;

var vccInstaller = getBuildToolsInstallerPath();
var pythonInstaller = getPythonInstallerPath();

var _require4 = require('../constants'),
    buildTools = _require4.buildTools;

/**
 * Launches the installer, using a PS1 script as a middle-man
 *
 * @returns {Promise.<Object>} - Promise that resolves with the launch-installer result
 */


function launchInstaller() {
  return new Promise(function (resolve, reject) {
    var extraArgs = '';
    var parsedArgs = {};

    if (process.env.npm_config_vcc_build_tools_parameters) {
      try {
        parsedArgs = JSON.parse(process.env.npm_config_vcc_build_tools_parameters);

        if (parsedArgs && parsedArgs.length > 0) {
          extraArgs = parsedArgs.join('%_; ');
        }
      } catch (e) {
        debug('Installer: Parsing additional arguments for VCC build tools failed: ' + e.message);
        debug('Input received: ' + process.env.npm_config_vcc_build_tools_parameters);
      }
    }

    var scriptPath = path.join(__dirname, '..', '..', 'ps1', 'launch-installer.ps1');
    var vccParam = '-visualStudioVersion \'' + buildTools.version.toString() + '\'';
    var pathParam = '-path \'' + vccInstaller.directory + '\'';
    var buildToolsParam = '-extraBuildToolsParameters \'' + extraArgs + '\'';
    var pythonParam = '-pythonInstaller \'' + pythonInstaller.fileName + '\'';
    var psArgs = '& {& \'' + scriptPath + '\' ' + pathParam + ' ' + buildToolsParam + ' ' + pythonParam + ' ' + vccParam + ' }';
    var args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];

    debug('Installer: Launching installer in ' + vccInstaller.directory + ' with file ' + vccInstaller.fileName + '.');

    var child = void 0;

    try {
      child = spawn('powershell.exe', args);
    } catch (error) {
      log(chalk.bold.red('Error: failed while trying to run powershell.exe'));
      log('(Hint: Is "%SystemRoot%\\system32\\WindowsPowerShell\\v1.0" in your system path?)');
      return reject(error);
    }

    child.stdout.on('data', function (data) {
      debug('Installer: Stdout from launch-installer.ps1: ' + data.toString());

      if (data.toString().includes('Please restart this script from an administrative PowerShell!')) {
        log(chalk.bold.red('Please restart this script from an administrative PowerShell!'));
        log('The build tools cannot be installed without administrative rights.');
        log('To fix, right-click on PowerShell and run "as Administrator".');

        // Bail out
        process.exit(1);
      }
    });

    child.stderr.on('data', function (data) {
      return debug('Installer: Stderr from launch-installer.ps1: ' + data.toString());
    });

    child.on('exit', function () {
      return resolve();
    });
    child.stdin.end();
  });
}

module.exports = launchInstaller;