'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var debug = require('debug')('windows-build-tools');
var chalk = require('chalk');

var _require = require('../utils/get-python-installer-path'),
    getPythonInstallerPath = _require.getPythonInstallerPath;

var _require2 = require('../utils/get-work-dir'),
    getWorkDirectory = _require2.getWorkDirectory;

var _require3 = require('../utils/single-line-log'),
    createSingleLineLogger = _require3.createSingleLineLogger;

var _require4 = require('../utils/get-build-tools-installer-path'),
    getBuildToolsInstallerPath = _require4.getBuildToolsInstallerPath;

var _require5 = require('../utils/clean'),
    cleanExistingLogFiles = _require5.cleanExistingLogFiles;

var _require6 = require('../logging'),
    log = _require6.log,
    shouldLog = _require6.shouldLog;

var launchInstaller = require('./launch');
var Tailer = require('./tailer');

var singleLineLogger = createSingleLineLogger();
var vccInstaller = getBuildToolsInstallerPath();

var vcLogTitle = chalk.bold.green('---------- Visual Studio Build Tools ----------');
var pyLogTitle = chalk.bold.green('------------------- Python --------------------');
var vccLastLines = ['Still waiting for installer log file...'];
var pythonLastLines = ['Still waiting for installer log file...'];
var lastLinesInterval = null;

/**
 * Installs the build tools, tailing the installation log file
 * to understand what's happening
 *
 * @returns {Promise.<Object>} - Promise that resolves with the installation result
 */

function install(cb) {
  log(chalk.green('\nStarting installation...'));

  cleanExistingLogFiles();

  launchInstaller().then(function () {
    return launchLog();
  }).then(function () {
    return Promise.all([installBuildTools(), installPython()]);
  }).then(function (paths) {
    logStatus();
    stopLog();

    var variables = {
      buildTools: paths[0],
      python: paths[1]
    };
    cb(variables);
  }).catch(function (error) {
    log(error);
  });
}

function logStatus() {
  var updatedLog = [vcLogTitle].concat(_toConsumableArray(vccLastLines), [pyLogTitle], _toConsumableArray(pythonLastLines));
  singleLineLogger(updatedLog.join('\n'));
}

function launchLog() {
  if (!shouldLog) return;

  log('Launched installers, now waiting for them to finish.');
  log('This will likely take some time - please be patient!\n');
  log('Status from the installers:');

  lastLinesInterval = setInterval(logStatus, 1000);
}

function stopLog() {
  if (!shouldLog) return;

  clearInterval(lastLinesInterval);

  // Flush newlines
  log('');
}

function installBuildTools() {
  return new Promise(function (resolve, reject) {
    var tailer = new Tailer(vccInstaller.logPath);

    tailer.on('lastLines', function (lastLines) {
      vccLastLines = lastLines;
    });

    tailer.on('exit', function (result, details) {
      debug('Install: Build tools tailer exited');

      if (result === 'error') {
        debug('Installer: Tailer found error with installer', details);
        reject(new Error('Found error with VCC installer: ' + details));
      }

      if (result === 'success') {
        vccLastLines = [chalk.bold.green('Successfully installed Visual Studio Build Tools.')];
        debug('Installer: Successfully installed Visual Studio Build Tools according to tailer');
        resolve();
      }

      if (result === 'failure') {
        log(chalk.bold.red('Could not install Visual Studio Build Tools.'));
        log('Please find more details in the log files, which can be found at');
        log(getWorkDirectory());
        debug('Installer: Failed to install according to tailer');
        resolve();
      }
    });

    tailer.start();
  });
}

function installPython() {
  return new Promise(function (resolve, reject) {
    // The log file for msiexe is utf-16
    var tailer = new Tailer(getPythonInstallerPath().logPath, 'ucs2');

    tailer.on('lastLines', function (lastLines) {
      pythonLastLines = lastLines;
    });

    tailer.on('exit', function (result, details) {
      debug('python tailer exited');
      if (result === 'error') {
        debug('Installer: Tailer found error with installer', details);
        reject(new Error('Found error with Python installer: ' + details));
      }

      if (result === 'success') {
        pythonLastLines = [chalk.bold.green('Successfully installed Python 2.7')];
        debug('Installer: Successfully installed Python 2.7 according to tailer');

        var variables = {
          pythonPath: details || getPythonInstallerPath().targetPath
        };
        resolve(variables);
      }

      if (result === 'failure') {
        log(chalk.bold.red('Could not install Python 2.7.'));
        log('Please find more details in the log files, which can be found at');
        log(getWorkDirectory());
        debug('Installer: Failed to install Python 2.7 according to tailer');
        resolve(undefined);
      }
    });

    tailer.start();
  });
}

module.exports = install;