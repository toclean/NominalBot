'use strict';

var path = require('path');
var fs = require('fs-extra');

var _require = require('os'),
    tmpdir = _require.tmpdir;

var debug = require('debug')('windows-build-tools');

var tmp = tmpdir();

/**
 * Looks for a dd_client_ file and returns the path if found.\
 * Returns null if not found.
 *
 * @returns {string|null}
 */
function findVCCLogFile() {
  return new Promise(function (resolve) {
    fs.readdir(tmp).then(function (contents) {
      // Files that begin with dd_client_
      var matchingFiles = contents.filter(function (f) {
        return f.startsWith('dd_client_');
      });
      var matchingFile = null;

      if (matchingFiles && matchingFiles.length === 1) {
        // Is it just one? Cool, let's use that one
        matchingFile = path.join(tmp, matchingFiles[0]);
        debug('Find LogFile: Just one file found, resolving with ' + matchingFile);
      } else if (!matchingFiles || matchingFiles.length === 0) {
        // No files? Return null
        debug('Find LogFile: No files found, resolving with null');
        matchingFile = null;
      } else {
        // Multiple files! Oh boy, let's find the last one
        debug('Find LogFile: Multiple files found, determining last modified one');
        var lastModified = matchingFiles.reduce(function (previous, current) {
          var file = path.join(tmp, current);
          var stats = fs.statSync(file);

          var modifiedTime = void 0;

          if (stats && stats.mtimeMs) {
            // This value is only available in Node 8+
            modifiedTime = stats.mtimeMs;
          } else if (stats && stats.mtime) {
            // Fallback for the other versions
            modifiedTime = new Date(stats.mtime).getTime();
          }

          debug('Find LogFile: Comparing ' + modifiedTime + ' to ' + previous.timestamp);

          if (modifiedTime && modifiedTime > previous.timestamp) {
            return { file: current, timestamp: modifiedTime };
          } else {
            return previous;
          }
        }, { file: null, timestamp: 0 });

        debug('Find LogFile: Returning ' + lastModified.file);
        matchingFile = path.join(tmp, lastModified.file);
      }

      resolve(matchingFile);
    });
  });
}

module.exports = { findVCCLogFile: findVCCLogFile };